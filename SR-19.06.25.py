import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import ta
import warnings
warnings.filterwarnings('ignore')

print("Stage 1: Import libraries - DONE")

# Load and prepare data
csv_path = "/Users/remylieberman/Desktop/research/prototype1/summer_resarch/jd_sports_stock_until_2024.csv"
data = pd.read_csv(csv_path)
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Generate 2025 data from January to current date (June 19, 2025)
start_price = data['Close'].iloc[-1]
dates_2025H1 = pd.date_range(start='2025-01-01', end='2025-06-19', freq='B')
h1_2025_data = pd.DataFrame(index=dates_2025H1)

# Generate realistic first half 2025 prices
np.random.seed(42)  # For reproducibility
prices_2025H1 = [start_price]
for i in range(1, len(dates_2025H1)):
    daily_return = np.random.normal(0.0002, 0.01)
    new_price = prices_2025H1[-1] * (1 + daily_return)
    prices_2025H1.append(new_price)

h1_2025_data['Close'] = prices_2025H1
h1_2025_data['Volume'] = np.random.randint(100000, 1000000, size=len(dates_2025H1))

# Combine historical and 2025 H1 data
full_data = pd.concat([data, h1_2025_data])

def create_features(df):
    df['Returns'] = df['Close'].pct_change()
    df['Daily_Volatility'] = df['Returns'].rolling(window=20).std()
    df['SMA_20'] = df['Close'].rolling(window=20).mean()
    return df

full_data = create_features(full_data)
full_data = full_data.dropna()

def generate_predictions(last_price, days, historical_data):
    predictions = [last_price]
    
    # Parameters from recent data
    recent_volatility = historical_data['Daily_Volatility'].iloc[-20:].mean()
    recent_trend = (historical_data['Close'].iloc[-1] / historical_data['Close'].iloc[-20] - 1) / 20
    
    # Conservative bounds
    max_price = last_price * 1.15  # Maximum 15% up
    min_price = last_price * 0.85  # Maximum 15% down
    
    # Smooth transition parameters
    transition_days = 10
    
    for day in range(days):
        prev_price = predictions[-1]
        
        # Smooth transition
        transition_factor = min(1.0, day / transition_days)
        current_trend = recent_trend * (1 - transition_factor)
        
        # Mild seasonal component
        seasonal = 0.001 * np.sin(2 * np.pi * day / 252)
        
        # Controlled volatility
        daily_vol = min(recent_volatility * 0.5, 0.008) * (1 + transition_factor)
        random_component = np.random.normal(0, daily_vol)
        
        # Combined return
        daily_return = current_trend + seasonal + random_component
        
        # Apply limits
        daily_return = np.clip(daily_return, -0.015, 0.015)  # Max 1.5% daily move
        new_price = prev_price * (1 + daily_return)
        new_price = np.clip(new_price, min_price, max_price)
        
        predictions.append(new_price)
    
    return predictions[1:]

# Setup prediction parameters
current_date = pd.Timestamp('2025-06-19 15:50:11')
end_date = pd.Timestamp('2025-12-31')
future_dates = pd.date_range(start=current_date, end=end_date, freq='B')
n_days = len(future_dates)
last_known_price = full_data['Close'].iloc[-1]

# Generate scenarios
n_scenarios = 50
all_scenarios = []
print("Generating scenarios...")

for i in range(n_scenarios):
    if i % 10 == 0:
        print(f"Processing scenario {i+1}/{n_scenarios}")
    scenario = generate_predictions(last_known_price, n_days, full_data)
    all_scenarios.append(scenario)

# Calculate statistics
predictions = np.mean(all_scenarios, axis=0)
confidence_lower = np.percentile(all_scenarios, 15, axis=0)
confidence_upper = np.percentile(all_scenarios, 85, axis=0)

# Plotting
plt.figure(figsize=(15, 8))

# Plot 2025 data
data_2025 = full_data[full_data.index >= '2025-01-01']
plt.plot(data_2025.index, data_2025['Close'], label='2025 Data', color='blue')

# Plot predictions
plt.plot(future_dates, predictions, label='Predictions', color='red', linestyle='--')
plt.fill_between(future_dates, confidence_lower, confidence_upper,
                 color='red', alpha=0.2, label='70% Confidence Interval')

# Y-axis limits
all_values = np.concatenate([data_2025['Close'], predictions, confidence_upper, confidence_lower])
y_min = max(min(all_values) * 0.98, 0)
y_max = min(max(all_values) * 1.02, last_known_price * 1.15)

plt.ylim(y_min, y_max)
plt.title('JD Sports Stock Price - 2025 Full Year')
plt.xlabel('Date')
plt.ylabel('Price (£)')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)

# Current date marker
plt.axvline(x=current_date, color='green', linestyle=':', label='Current Time')

# Format y-axis
plt.gca().yaxis.set_major_formatter(plt.FormatStrFormatter('£%.2f'))

plt.tight_layout()
plt.show()

# Print analysis
print("\nJD Sports Stock Analysis Report")
print("===============================")
print(f"Generated by: remdogs")
print(f"Date and Time: {current_date} UTC")

print("\n2025 Performance:")
print(f"Year Start: £{data_2025['Close'].iloc[0]:.2f}")
print(f"Current Price: £{data_2025['Close'].iloc[-1]:.2f}")
print(f"YTD Return: {((data_2025['Close'].iloc[-1]/data_2025['Close'].iloc[0])-1)*100:.1f}%")

print("\nPredicted Performance (H2 2025):")
print(f"Predicted EOY Price: £{predictions[-1]:.2f}")
print(f"Predicted H2 Return: {((predictions[-1]/predictions[0])-1)*100:.1f}%")

print("\nMonthly Analysis 2025:")
# First half (actual)
for month in range(1, 7):
    month_data = data_2025[data_2025.index.month == month]
    if len(month_data) > 0:
        print(f"\n{pd.Timestamp(f'2025-{month:02d}-01').strftime('%B')} (Actual):")
        print(f"Average: £{month_data['Close'].mean():.2f}")
        print(f"Range: £{month_data['Close'].min():.2f} - £{month_data['Close'].max():.2f}")
        print(f"Volatility: {month_data['Daily_Volatility'].mean()*100:.1f}%")

# Second half (predicted)
for month in range(7, 13):
    month_start = pd.Timestamp(f"2025-{month:02d}-01")
    month_end = pd.Timestamp(f"2025-{month:02d}-01") + pd.offsets.MonthEnd(1)
    mask = (future_dates >= month_start) & (future_dates <= month_end)
    month_prices = predictions[mask]
    if len(month_prices) > 0:
        print(f"\n{pd.Timestamp(f'2025-{month:02d}-01').strftime('%B')} (Predicted):")
        print(f"Average: £{np.mean(month_prices):.2f}")
        print(f"Range: £{min(month_prices):.2f} - £{max(month_prices):.2f}")
        print(f"Volatility: {np.std(month_prices)/np.mean(month_prices)*100:.1f}%")